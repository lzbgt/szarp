#!/usr/bin/python
# -*- coding: UTF-8 -*-
# vim: set fileencoding=utf-8 :
#
# SZARP: SCADA software
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

"""
Wrapper for running ipk2szarp configuration parser
and for displaying suggestions to user.
"""

import argparse
import subprocess
from subprocess import Popen, PIPE
import pysvn
import sys
import os
from clint.textui import puts, indent, colored
from clint.textui.core import STDOUT, STDERR
from lxml import etree
import hashlib
import re
import glob
import unicodedata

namespace = "{http://www.praterm.com.pl/SZARP/ipk}"
namespace_extra = "{http://www.praterm.com.pl/SZARP/ipk-extra}"

error_count = 0
quiet = False
def printerr(msg, prefix="ERROR: "):
	global error_count
	error_count = error_count + 1
	msg = unicode_to_ascii(msg)
	puts(colored.red(prefix + "(" + str(error_count) + ") " + str(msg)), stream=STDERR)

note_count = 0
def printnote(msg, prefix="NOTE: "):
	global note_count
	note_count = note_count + 1
	msg = unicode_to_ascii(msg)
	puts(colored.yellow(prefix + "(" + str(note_count) + ") " + str(msg)))

note_list = []
def add_note(msg):
	note_list.append(msg)

def add_ns(ns, param):
	return ns + param

def print_notes():
	for note in note_list:
		printnote(note)

def printok(msg):
	puts(colored.green(str(msg)))

def unicode_to_ascii(string):
	"""
	Converts unicode string to printable ascii form, removes polish characters
	"""
	try:
		return unicodedata.normalize('NFKD', string).replace(u'ł', 'l').replace(u'Ł', 'L').encode('ascii', 'ignore')
	except TypeError:
		return string

def get_szarp_uncommited():
	client = pysvn.Client()
	is_svn_repo = True
	try:
		client.info(szarp_path)
	except:
		is_svn_repo = False
	if is_svn_repo:
		changes = client.status(szarp_path, get_all=False)
		interesting = set([pysvn.wc_status_kind.added, pysvn.wc_status_kind.deleted,\
			pysvn.wc_status_kind.modified, pysvn.wc_status_kind.conflicted])
		uncommited = [f.path for f in changes if f.text_status in interesting]
		uncommited_present = len(uncommited) > 0
	else:
		uncommited_present = None
	return is_svn_repo, uncommited_present

def get_szarp_path():
	if args.input_file is None:
		szarp_default = os.path.realpath("/etc/szarp/default")
		params_default = os.path.join(szarp_default, "config", "params.xml")
		return szarp_default, params_default
	else:
		if os.path.exists(args.input_file) and "/opt/szarp/" in os.path.abspath(args.input_file):
			params = os.path.abspath(args.input_file)
			config = os.path.dirname(params)
			szarp = os.path.dirname(config)
		elif os.path.exists(args.input_file):
			params = os.path.abspath(args.input_file)
			szarp = os.path.dirname(params)
		else:
			printerr(args.input_file + " does not exist")
			sys.exit(1)
		return szarp, params

def check_svn():
	szarp_svn, szarp_uncommited = get_szarp_uncommited()
	if szarp_svn:
		if szarp_uncommited:
			add_note("uncommited changes found in " + szarp_path + ": /opt/szarp/bin/conf-put.sh")
	else:
		if not quiet:
			add_note(szarp_path + " is not added to svn, maybe it should?")

def get_params_scheme():
	"""
	Getting params.xml to push it scheme to other functions
	"""
	options = etree.XMLParser(remove_blank_text=True, remove_comments=True)
	params_scheme = etree.parse(params_path, options)
	return params_scheme

def get_isl_list():
	"""
	Get list of isl file containing in szarp-server base from /config/isl/
	"""
	isl_regex = re.compile(r".{1,}\.isl")
	ls = subprocess.Popen(("ls", os.path.join(szarp_path, "config", "isl")), stdout=subprocess.PIPE)
	isl_ls = ls.communicate()[0]
	isl_list = []
	for isl in isl_ls.split('\n'):
		if isl.endswith(".isl"):
			isl_list.append(isl)
	return isl_list

def parse_config_file():
	config = params.getroot()
	elements = list(config)
	return elements

def check_for_daemons():
	"""
	Testing - looking for custom daemons, looking for extra:param base in dbmdmn daemon
	"""
	md5sum_regex = re.compile(r"[a-f0-9]{32}")
	daemon_regex = re.compile(r"(?<=\/opt\/szarp\/bin\/).*")
	daemons_list = []
	for device in elements:
		for attr, value in device.items():
			if attr == "daemon":
				if not value in daemons_list:
					daemons_list.insert(0,value)
					md5sum_check = 0
					if daemon_regex.search(value):
						daemon = daemon_regex.search(value)
					else:
						continue
					with open("/var/lib/dpkg/info/szarp-daemons.md5sums", "r") as md5file:
						for line in md5file:
							standard_daemon_md5sum = re.search(r"[a-f0-9]{32}.{16}" + daemon.group(0) , line)
							if standard_daemon_md5sum is not None:
								md5sum = md5sum_regex.search(line)
								md5sum_check = md5sum.group(0)
								break
					try:
						daemon_md5sum = hashlib.md5(open(value, 'rb').read()).hexdigest()
					except:
						daemon_md5sum = 0
					if md5sum_check != daemon_md5sum is not None:
						add_note("custom daemon found in " + value)
				if value == "dbdmn":
					for unit in device:
						for param in unit:
							param_path = param.get(add_ns(namespace_extra, "param"))
							if param_path is not None:
								base = re.search(r"(?P<base>[^:]*):", param_path).group("base")
								base_path = "/opt/szarp/" + base
								if not os.path.exists(base_path):
									printerr("extra:param base '%s' doesn't exist (line %d)" % (base, param.sourceline))

def check_if_file_exist():
	file_to_check = re.compile(r"\/opt\/szarp\/.")
	not_found_files = []
	for device in elements:
		for attr, value in device.items():
			find_file = file_to_check.search(value)
			if find_file is not None:
				if os.path.exists(value) is False:
					if not value in not_found_files:
						if device.get("daemon").endswith("testdmn") and attr == "path":
							# the source data file may not exist at this moment
							add_note("source data file for testdmn: '%s' does not exist" % value)
						else:
							printerr(value + " does not exist!")
						not_found_files.append(value)

def check_if_parameter_exist():
	"""
	Main function for going through isl files and check whether parameter exists
	"""
	options = etree.XMLParser(remove_blank_text=True, remove_comments=True)
	params_list = []
	for isl_file in isl_list:
		isl_path = os.path.join(szarp_path, "config", "isl", isl_file)
		xml_file = etree.parse(isl_path, options)
		isl = xml_file.getroot()
		isl_element = list(isl)
		find_parameter_from_isl(isl_element, params_list, isl_file)

param_list = []
def get_parameters_from_device():
	for device in elements:
		if device.tag == add_ns(namespace, "device"):
			for unit in device:
				if unit.tag == add_ns(namespace, "unit"):
					for param in unit:
						if param.tag == add_ns(namespace, "param"):
							param_list.append(param)

def get_parameters_from_defined():
	for defined in elements:
		if defined.tag == add_ns(namespace, "defined"):
			for param in defined:
				if param.tag == add_ns(namespace, "param"):
					param_list.append(param)

def get_parameters_from_drawdefinable():
	for drawdefinable in elements:
		if drawdefinable.tag == add_ns(namespace, "drawdefinable"):
			for param in drawdefinable:
				if param.tag == add_ns(namespace, "param"):
					param_list.append(param)

def check_no_base_ind():
	get_parameters_from_device()
	get_parameters_from_defined()
	for param in param_list:
		if param.get("base_ind") is None:
			name = unicode_to_ascii(param.get("name"))
			add_note("parameter '%s' no base_ind, won't be written to szbase (line %d)" % (name, param.sourceline))
	get_parameters_from_drawdefinable()

def check_params_xmlschema():
	"""
	Testing params with XMLSchema
	"""
	try:
		if os.path.exists("/opt/szarp/resources/dtd/ipk-params.xsd"):
			validate = os.path.join("/opt", "szarp", "resources", "dtd", "ipk-params.xsd")
			validator = etree.XMLSchema(file=validate)
		else:
			validate = os.path.join("/opt", "szarp", "resources", "dtd", "ipk-params.rng")
			add_note("Using RNG schema validator, all warning would not be complete")
			validator = etree.RelaxNG(file=validate)
		try:
			validator.assertValid(params)
		except BaseException as ex:
			add_note(validator.error_log)
	except Exception as e:
		printerr(e)

def check_under_defined_elements():
	"""
	Testing define elements for: RPN as attribute type of define element
	"""
	for defined in elements:
		if defined.tag == add_ns(namespace, "defined"):
			for param in defined:
				for define in param:
					if define.tag == add_ns(namespace, "define"):
						for attr, value in define.items():
							if attr == "type" and value != "RPN":
								printerr("found \"" + value + "\" as defined formula type, expected \"RPN\" (line " + str(define.sourceline) + ")")

def check_under_device_elements():
	"""
	Testing draw elements for: value min/max ratio, valuescace/minscale/maxscale
		ratio
	Testing send elements for: unit in param node, wrong order of send elements,
		param or value in send element, attribue min/max, separated by comma or dot
	"""
	for device in elements:
		if device.tag == add_ns(namespace, "device"):
			for unit in device:
				for element in unit:
					if element.tag == add_ns(namespace, "param"):
						for draw in element:
							if draw.tag == add_ns(namespace, "draw"):
								min_value = 0
								max_value = 0
								scale_value = 0
								min_scale_value = 0
								max_scale_value = 0
								for attr, value in draw.items():
									if attr == "min":
										min_value = value
									elif attr == "max":
										max_value = value
									elif attr == "scale":
										scale_value = value
									elif attr == "minscale":
										min_scale_value = value
									elif attr == "maxscale":
										max_scale_value = value
								if float(min_value) > float(max_value):
									add_note("in element draw found wrong min/max ratio (line " + str(draw.sourceline) + ")")
								if float(min_scale_value) > float(max_scale_value) > float(scale_value):
									add_note("in element draw found wrong scale/minscale/maxscale ratio (line " + str(draw.sourceline) + ")")
					elif element.tag == add_ns(namespace, "send"):
						try:
							if element.getnext().tag != add_ns(namespace, "send"):
								add_note("found wrong order of 'send' elements (line " + str(element.sourceline) + ")")
						except:
							pass
						try:
							for attr, value in element.items():
								found_param_or_value = False
								if attr == "param" or attr == "value":
									found_param_or_value = True
									break
								elif attr == "min" or attr == "max":
									if "," in value:
										printerr("min/max in 'send' contains comma, dot symbol requested (line " + str(element.sourceline) + ")")
							if found_param_or_value is False:
								printerr("found send without param or value (line " + str(element.sourceline) + ")")
						except:
							pass

def find_parameter_from_isl(branch, params_list, isl_file):
	"""
	Recursion function for finding parameter from isl
	"""
	for child_branch in branch:
		for attr, value in child_branch.items():
			if "localhost" in value:
				try:
					internal_parameter = re.search(r"(?<=[0-9]{4}\/).+(?=@)", value)
					parameter_name = str(internal_parameter.group(0))
					if not parameter_name in params_list:
						params_list.append(parameter_name)
					else:
						continue
					if not find_parameter_from_params(parameter_name):
						add_note("parameter \'" + parameter_name + "\' doesn't exist, called in isl:uri in " + isl_file + " (around line " + str(child_branch.sourceline) + ")")
				except:
					add_note("found bad call on isl:uri \'" + value + "\' in " + isl_file + " (around line " + str(child_branch.sourceline) + ")")
		find_parameter_from_isl(child_branch, params_list, isl_file)

def find_parameter_from_params(parameter_name):
	for param in param_list:
		name_to_check = prepare_param_name(param.get("name"))
		if parameter_name in name_to_check:
			return True
	return False

def prepare_param_name(param_name):
	def conv(x):
		if x in [ u"0", u"1", u"2", u"3", u"4", u"5", u"6", u"7", u"8", u"9",
			u"a", u"b", u"c", u"d", u"e", u"f", u"g", u"h", u"i", u"j",
			u"k", u"l", u"m", u"n", u"o", u"p", u"q", u"r", u"s", u"t",
			u"u", u"v", u"w", u"x", u"y", u"z",
			u"A", u"B", u"C", u"D", u"E", u"F", u"G", u"H", u"I", u"J",
			u"K", u"L", u"M", u"N", u"O", u"P", u"Q", u"R", u"S", u"T",
			u"U", u"V", u"W", u"X", u"Y", u"Z"]:
			return x

		if x == u":":
			return "/"

		pmap = { u"ą" : u"a", u"Ą" : u"A", u"ć" : u"c", u"Ć" : u"C",
			u"ę" : u"e", u"Ę" : u"E", u"ł" : u"l", u"Ł" : u"L",
			u"ń" : u"n", u"Ń" : u"N", u"ó" : u"o", u"Ó" : u"O",
			u"ś" : u"s", u"Ś" : u"S", u"ż" : u"z", u"Ż" : u"Z",
			u"ź" : u"z", u"Ź" : u"Z" }

		if x in pmap:
			return pmap[x]

		return u"_"

	return "".join([ conv(x) for x in param_name ])

def do_tests():
	check_params_xmlschema()
	check_if_file_exist()
	check_for_daemons()
	check_under_defined_elements()
	check_under_device_elements()

def test_isl_file():
	check_if_parameter_exist()

parser = argparse.ArgumentParser(description='Parses params.xml and checks for errors.')
parser.add_argument('-i', '--input-file',
	help='XML config file (default is params.xml), passed to ipk2szarp')
parser.add_argument('-d', '--debug', type=int,
	help='debug level from 0 (errors only) to 9, passed to ipk2szarp')
parser.add_argument('-a', '--additional-test', action='store_true',
	help='do additional test, including testing isls stored in ' + os.path.realpath("/etc/szarp/default"))
parser.add_argument('-q', '--quiet', action='store_true',
	help="hide not important messages, to be used e.g. in scripts")

args = parser.parse_args()

conf_parser = "/opt/szarp/bin/ipk2szarp"
command = [conf_parser]

if args.debug:
	command.append('--debug=' + str(args.debug))

if args.input_file:
	command.append(args.input_file)

quiet = args.quiet

process = Popen(command, stdout=PIPE, stderr=PIPE)
stdout, stderr = process.communicate()
if stdout:
	add_note(stdout.rstrip())
if stderr:
	printerr(stderr.rstrip(), '')

if not quiet:
	add_note("if configuration has changed: /etc/init.d/parstart restart")
szarp_path, params_path = get_szarp_path()
params = get_params_scheme()
elements = parse_config_file()
check_svn()
do_tests()
if args.additional_test:
	check_no_base_ind()
	if os.path.exists(os.path.join(szarp_path, "config", "isl")):
		isl_list = get_isl_list()
		test_isl_file()
print_notes()
if error_count == 0:
	if not quiet:
		printok("OK")
else:
	printerr("params.xml not wellformed, check previous logs!")
	printerr("ERROR", '')
	sys.exit(1)
